tidyr::gather("source", obs, -!!by) %>%
dplyr::mutate(source = gsub(paste0(col_name, "\\."), "", source)) %>%
dplyr::mutate(source = gsub("x", "Correct", source)) %>%
dplyr::mutate(source = gsub("y", "Candidate", source))
ggplot(df_summary, aes(x = source, y=obs, fill=source)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
scale_x_discrete(limits=c("Correct", "Candidate")) +
xlab("Data") +
ylab(col_name) +
theme_minimal() +
theme(legend.position = "none")
}
violin_compare(dfs$Date, Date, "meanDist")
#'
#'Compares summary statistics from two datasets as side-by-side violin plots
#'
#'@param df_summary data frame of summary statistics from both datasets to be compared
#'@param by GPS or Date
#'@param col_name variable in df_summary to be used for the y-axis, as a string
#'@param out file name to save plot
#'@export
#'
violin_compare <- function(df_summary, by, col_name, out) {
by <- dplyr::enquo(by)
df_summary <- df_summary %>%
dplyr::select(!!by, paste0(col_name, ".x"), paste0(col_name, ".y")) %>%
tidyr::gather("source", obs, -!!by) %>%
dplyr::mutate(source = gsub(paste0(col_name, "\\."), "", source)) %>%
dplyr::mutate(source = gsub("x", "Correct", source)) %>%
dplyr::mutate(source = gsub("y", "Candidate", source))
ggplot(df_summary, aes(x = source, y=obs, fill=source)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
scale_x_discrete(limits=c("Correct", "Candidate")) +
xlab("Data") +
ylab(col_name) +
theme_minimal() +
theme(legend.position = "none")
ggsave(out)
}
?violin_compare
# plot mean distance by date
violin_compare(dfs$Date, Date, "meanDist", "inst/extdata/processed/meanDist_date_arizona.png")
violin_compare(dfs$Date, Date, "meanElev", "inst/extdata/processed/meanElev_date_arizona.png")
# summary by date
summary(dfs$Date)
# plot mean rate by date
violin_compare(dfs$Date, Date, "meanRate", "inst/extdata/processed/meanRate_date_arizona.png")
str(dfs$Date)
?ggsave
library(ggplot2)
library(dplyr)
?ggsave
#'
#'Compares summary statistics from two datasets as side-by-side violin plots
#'
#'@param df_summary data frame of summary statistics from both datasets to be compared
#'@param by GPS or Date
#'@param col_name variable in df_summary to be used for the y-axis, as a string
#'@param out file name to save plot
#'@return side-by-side violin plots
#'@export
#'
violin_compare <- function(df_summary, by, col_name, out) {
by <- dplyr::enquo(by)
df_summary <- df_summary %>%
dplyr::select(!!by, paste0(col_name, ".x"), paste0(col_name, ".y")) %>%
tidyr::gather("source", obs, -!!by) %>%
dplyr::mutate(source = gsub(paste0(col_name, "\\."), "", source)) %>%
dplyr::mutate(source = gsub("x", "Correct", source)) %>%
dplyr::mutate(source = gsub("y", "Candidate", source))
violin <- ggplot(df_summary, aes(x = source, y=obs, fill=source)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
scale_x_discrete(limits=c("Correct", "Candidate")) +
xlab("Data") +
ylab(col_name) +
theme_minimal() +
theme(legend.position = "none")
ggsave(out, violin)
return(violin)
}
source('~/animaltracker/R/data_analysis.R')
# plot number of observations by date
n_date <- violin_compare(dfs$Date, Date, "n", "inst/extdata/processed/n_date_arizona.png")
# summary by date
summary(dfs$Date)
View(df_correct)
View(df_correct)
View(df_correct)
View(df_candidate)
source('~/animaltracker/R/data_analysis.R')
View(df_candidate)
knitr::opts_chunk$set(echo = TRUE)
df_correct <- read.csv('inst/extdata/correct.csv', stringsAsFactors = F) %>%
dplyr::rename(GPS = collar) %>%
dplyr::rename(Date = date) %>%
dplyr::rename(Distance = distancetr) %>%
dplyr::rename(Rate = RATE) %>%
dplyr::mutate(Date = as.Date(Date))
source('R/data_analysis.R')
library(dplyr)
library(ggplot2)
df_correct <- read.csv('inst/extdata/correct.csv', stringsAsFactors = F) %>%
dplyr::rename(GPS = collar) %>%
dplyr::rename(Date = date) %>%
dplyr::rename(Distance = distancetr) %>%
dplyr::rename(Rate = RATE) %>%
dplyr::mutate(Date = as.Date(Date))
View(df_candidate)
df_candidate <- read.csv('inst/extdata/candidate.csv', stringsAsFactors = F) %>%
dplyr::mutate(Date = as.Date(Date))
compare_summarise_monthly <- function(correct, candidate) {
correct_summary <- correct %>%
dplyr::mutate(Month = format(date, "%m")) %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, monthly=T)
candidate_summary <- candidate %>%
dplyr::mutate(Month = format(date, "%m")) %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, monthly=T)
summary_all <- join_summaries(correct_summary, candidate_summary, monthly=T)
}
source('~/animaltracker/R/data_analysis.R')
compare_summarise_monthly(df_correct, df_candidate)
source('~/animaltracker/R/data_analysis.R')
compare_summarise_monthly(df_correct, df_candidate)
str(compare_summarise_monthly(df_correct, df_candidate))
monthly <- compare_summarise_monthly(df_correct, df_candidate)
View(monthly)
source('~/animaltracker/R/data_analysis.R')
monthly <- compare_summarise_monthly(df_correct, df_candidate)
View(monthly)
summary(monthly)
source('~/animaltracker/R/data_analysis.R')
monthly <- compare_summarise_monthly(df_correct, df_candidate)
source('~/animaltracker/R/data_analysis.R')
monthly <- compare_summarise_monthly(df_correct, df_candidate)
source('~/animaltracker/R/data_analysis.R')
monthly <- compare_summarise_monthly(df_correct, df_candidate)
#'@param by column to group by, null if daily=T
#'@param lat latitude column
#'@param long longitude column
#'@param dist distance column
#'@param course course column
#'@param rate rate column
#'@param elev elevation column
#'@param daily whether to group by both GPS and Date for daily summary, defaults to False
#'
#'
summarise_anidf <- function(anidf, by, lat, long, dist, course, rate, elev, daily=F) {
by <- dplyr::enquo(by)
lat <- dplyr::enquo(lat)
long <- dplyr::enquo(long)
dist <- dplyr::enquo(dist)
course <- dplyr::enquo(course)
rate <- dplyr::enquo(rate)
elev <- dplyr::enquo(elev)
if(daily) {
anidf <- anidf %>%
dplyr::group_by(GPS, Date)
}
else {
anidf <- anidf %>%
dplyr::group_by(!!by)
}
anidf %>%
dplyr::summarise(n = n(),
meanLat = mean(!!lat),
sdLat = sd(!!lat),
meanLong = mean(!!long),
sdLong = sd(!!long),
meanDist = mean(!!dist),
sdDist = sd(!!dist),
meanCourse = mean(!!course),
sdCourse = sd(!!course),
meanRate = mean(!!rate),
sdRate = sd(!!rate),
meanElev = mean(!!elev),
sdElev = sd(!!elev))
}
monthly <- compare_summarise_monthly(df_correct, df_candidate)
monthly <- compare_summarise_daily(df_correct, df_candidate)
View(monthly)
summary(monthly)
source('~/animaltracker/R/data_analysis.R')
line_compare_test <- function(correct, candidate, col, out) {
correct <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
head(correct1)
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
head(correct2)
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
line_compare_test <- function(correct, candidate, col_name, out) {
correct <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
head(correct1)
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
head(correct2)
}
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
head(correct1)
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
head(correct2)
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct1 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
head(correct1)
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
head(correct2)
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
t
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct1 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
print(head(correct1))
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
print(head(correct2))
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct1 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
correct2 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name))
print(setdiff(correct1, correct2))
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct1 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
correct2 <- correct %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name)) %>%
dplyr::mutate(Data = "Correct")
print(setdiff(correct1, correct2))
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
line_compare_test <- function(correct, candidate, col, out) {
col_name <- dplyr::enquo(col)
correct1 <- correct %>%
dplyr::mutate(Data = "Correct") %>%
dplyr::group_by(GPS, Date) %>%
dplyr::mutate(avg = mean(!!col_name)) %>%
dplyr::select(GPS, Date, Data, avg) %>%
dplyr::distinct()
correct2 <- correct %>%
dplyr::group_by(GPS, Date) %>%
dplyr::summarise(avg = mean(!!col_name)) %>%
dplyr::mutate(Data = "Correct")
print(all.equal(correct1, correct2))
}
line_compare_test(df_correct, df_candidate, Latitude, NULL)
View(df_candidate)
compare_summarise_daily(df_correct, df_candidate, "inst/extdata/processed/gps_daily_arizona.csv")
#'
#'Compares two animal datasets and calculates daily summary statistics.
#'GPS, date, lat, long, course, distance, rate, elevation column names should match.
#'
#'@param correct reference df
#'@param candidate df to be compared to the reference
#'@param gps_out desired file name of .csv output summary
#'@return summary df
#'@export
#'
compare_summarise_daily <- function(correct, candidate, out) {
correct_summary <- correct %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, daily=T)
print(1)
candidate_summary <- candidate %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, daily=T)
print(2)
summary_all <- join_summaries(correct_summary, candidate_summary, daily=T)
print(3)
write.csv(out, summary_all)
return(summary_all)
}
compare_summarise_daily(df_correct, df_candidate, "inst/extdata/processed/gps_daily_arizona.csv")
?write.csv
#'
#'Compares two animal datasets and calculates daily summary statistics.
#'GPS, date, lat, long, course, distance, rate, elevation column names should match.
#'
#'@param correct reference df
#'@param candidate df to be compared to the reference
#'@param gps_out desired file name of .csv output summary
#'@return summary df
#'@export
#'
compare_summarise_daily <- function(correct, candidate, out) {
correct_summary <- correct %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, daily=T)
candidate_summary <- candidate %>%
summarise_anidf(NULL, Latitude, Longitude, Distance, Course, Rate, Elevation, daily=T)
summary_all <- join_summaries(correct_summary, candidate_summary, daily=T)
write.csv(summary_all, out, row.names = F)
return(summary_all)
}
compare_summarise_daily(df_correct, df_candidate, "inst/extdata/processed/gps_daily_arizona.csv")
?scale_color_discrete
?IQR
?quantile
daily_summary <- compare_summarise_daily(df_correct, df_candidate, "inst/extdata/processed/gps_daily_arizona.csv")
daily_summary %>%
dplyr::filter((meanDistDiff > quantile(meanDistDiff, 0.75) + 1.5*IQR(meanDistDiff)) ||
(meanDistDiff < quantile(meanDistDiff, 0.25) - 1.5*IQR(meanDistDiff))
daily_summary %>%
dplyr::filter((meanDistDiff > quantile(meanDistDiff, 0.75) + 1.5*IQR(meanDistDiff)) ||
(meanDistDiff < quantile(meanDistDiff, 0.25) - 1.5*IQR(meanDistDiff)))
daily_summary %>%
dplyr::filter((meanCourseDiff > quantile(meanCourseDiff, 0.75) + 1.5*IQR(meanCourseDiff)) ||
(meanCourseDiff < quantile(meanCourseDiff, 0.25) - 1.5*IQR(meanCourseDiff))) %>%
dplyr::select(GPS, Date, meanCourseDiff)
IQR(daily_summary$meanCourseDiff)
quantile(daily_summary$meanCourseDiff, 0.25)
quantile(daily_summary$meanCourseDiff, 0.75)
?dplyr::filter
daily_summary %>%
dplyr::filter((meanCourseDiff > 18 ||
(meanCourseDiff < -18) %>%
dplyr::select(GPS, Date, meanCourseDiff)
daily_summary %>%
dplyr::filter((meanCourseDiff > 18 ||
(meanCourseDiff < -18) %>%
dplyr::select(GPS, Date, meanCourseDiff))
daily_summary %>%
dplyr::filter(meanCourseDiff > 18 ||
meanCourseDiff < -18) %>%
dplyr::select(GPS, Date, meanCourseDiff)
daily_summary %>%
dplyr::filter(meanCourseDiff > 18 |
meanCourseDiff < -18) %>%
dplyr::select(GPS, Date, meanCourseDiff)
?sqrt
library(animaltracker)
arizona_meta <- store_batch_list(list(datapath="inst/extdata/arizona_tocompare.zip", name="arizona_tocompare"))
source('~/animaltracker/R/data_storage.R')
arizona_meta <- store_batch_list(list(datapath="inst/extdata/arizona_tocompare.zip", name="arizona_tocompare"))
library(dplyr)
arizona_meta <- store_batch_list(list(datapath="inst/extdata/arizona_tocompare.zip", name="arizona_tocompare"))
devtools::check()
demo
?save
source('~/animaltracker/R/data_storage.R')
demo_info <- store_batch_list(list(datapath="inst/extdata/demo_aug19.zip", name="demo_aug19.zip"))
View(demo_info)
save(demo_info, file="data/demo_info.rda", compress="xz")
demo_unfiltered <- clean_batch_df(demo_info, autocleans = F, filters = F)
source('~/animaltracker/R/data_storage.R')
demo_unfiltered <- clean_batch_df(demo_info, autocleans = F, filters = F)
save(demo_unfiltered, file="data/demo_unfiltered.rda", compress="xz")
demo_filtered <- clean_batch_df(demo_info, autocleans = F, filters = T)
save(demo_filtered, file="data/demo_filtered.rda", compress="xz")
source('~/animaltracker/R/data_storage.R')
## the data were aggregated from SRTM 90 m resolution data between -60 and 60 latitude.
elev <- read_zip_to_rasters("data/elev/USA_msk_alt.zip")
library(animaltracker)
## the data were aggregated from SRTM 90 m resolution data between -60 and 60 latitude.
elev <- read_zip_to_rasters("data/elev/USA_msk_alt.zip")
source('~/animaltracker/R/data_processing.R')
## the data were aggregated from SRTM 90 m resolution data between -60 and 60 latitude.
elev <- read_zip_to_rasters("data/elev/USA_msk_alt.zip")
library(raster)
## the data were aggregated from SRTM 90 m resolution data between -60 and 60 latitude.
elev <- read_zip_to_rasters("data/elev/USA_msk_alt.zip")
demo_meta <- clean_store_batch(data_info, autocleans = F, filters = T, elev=elev, get_slope = T, get_aspect = T, min_lat = demo_info$min_lat, max_lat = demo_info$max_lat, min_long = demo_info$min_long, max_long = demo_info$max_long)
demo_meta <- clean_store_batch(demo_info, autocleans = F, filters = T, elev=elev, get_slope = T, get_aspect = T, min_lat = demo_info$min_lat, max_lat = demo_info$max_lat, min_long = demo_info$min_long, max_long = demo_info$max_long)
save(demo_meta, file="data/demo_meta.rda", compress = "xz")
demo <- get_data_from_meta(demo_meta, min_date = min(demo_meta$min_date), max_date = max(demo_meta$max_date))
View(demo)
save(demo, file="data/demo.rda", compress="xz")
View(demo_meta)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
View(elev)
source('~/animaltracker/R/data_storage.R')
run_shiny_animaltracker()
demo_meta <- clean_store_batch(demo_info, autocleans = F, filters = T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43, max_lat = 43.5, min_long = -117.5, max_long = -117)
## the data were aggregated from SRTM 90 m resolution data between -60 and 60 latitude.
elev <- read_zip_to_rasters("inst/extdata/elev/USA_msk_alt.zip")
demo_meta <- clean_store_batch(demo_info, autocleans = F, filters = T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43, max_lat = 43.5, min_long = -117.5, max_long = -117)
save(demo_meta, file="data/demo_meta.rda", compress = "xz")
demo <- get_data_from_meta(demo_meta, min_date = min(demo_meta$min_date), max_date = max(demo_meta$max_date))
save(demo, file="data/demo.rda", compress="xz")
library(animaltracker)
run_shiny_animaltracker()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
?tibble
?packageVersion("tibble")
packageVersion("tibble")
devtools::check()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()as
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?n
?%>%
devtools::check()
?SpatialPointsDataFrame
?CRS
?SpatialPointsDataFrame
?attach
?write.csv
?quantile
?percentile
devtools::check()
?addDrawToolbar
?raster
?`projection<-`
devtools::check()
?terrain
devtools::check()
devtools::check()
devtools::check()
source('~/animaltracker/R/data_storage.R')
View(demo_info)
clean_store_batch(demo_info, autocleans=F, filters=T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43.25743, max_lat, 43.5, min_long = -117.317, max_long = -117)
clean_store_batch(demo_info, autocleans=F, filters=T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43.25743, max_lat = 43.5, min_long = -117.317, max_long = -117)
clean_store_batch(demo_info, autocleans=F, filters=T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43.25743, max_lat = 43.5, min_long = -117.317, max_long = -117)
clean_store_batch(demo_info, autocleans=F, filters=T, elev=elev, get_slope = T, get_aspect = T, min_lat = 43.25743, max_lat = 43.5, min_long = -117.317, max_long = -117)
?summarize_unit
devtools::document()
?summarize_unit
devtools::check()
devtools::check()
View(demo)
View(demo)
View(demo)
?sample
?write.csv
?full_join
View(demo_filtered)
View(demo_unfiltered)
devtools::check()
