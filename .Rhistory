dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) #compute geodesic distance between points
# dplyr::mutate(RateFlag = 1*(Rate > 84)) %>%  # flag any data points representing too fast travel
# dplyr::mutate(CourseFlag = 1*(CourseDiff >= 100) ) %>%
# dplyr::mutate(DistanceFlag = 1*(DistGeo >= 840 )) %>%
# dplyr::mutate(TotalFlags = RateFlag + CourseFlag + DistanceFlag) %>%
# dplyr::filter(!is.na(DateTime), TotalFlags < 2,
#               Latitude!=0, Longitude !=0,
#               TimeDiffMins < 100,
#               Altitude > 2700/3.3, Altitude< 6000/3.3, # lower and upper limits (converted from feet to meters)
#               Latitude >= window$latmin,  Latitude <= window$latmax,
#               Longitude >= window$lonmin,  Longitude <= window$lonmax,
#               !DistanceFlag )
}
dftest <- read.csv("data/sample_location_data.csv")
xx <- clean_locations(dftest)
clean_locations<- function (df){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(Animal = as.factor(Animal))  %>%                     # reclassify Animal column as a categorical (factor) variable
dplyr::mutate(DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone)) %>%  # reclassify Date as a Date variable
dplyr::mutate(Date = as.Date(Date, "%Y/%m/%d"))  %>%            # reclassify Date as a Date variable
dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) #compute geodesic distance between points
# dplyr::mutate(RateFlag = 1*(Rate > 84)) %>%  # flag any data points representing too fast travel
# dplyr::mutate(CourseFlag = 1*(CourseDiff >= 100) ) %>%
# dplyr::mutate(DistanceFlag = 1*(DistGeo >= 840 )) %>%
# dplyr::mutate(TotalFlags = RateFlag + CourseFlag + DistanceFlag) %>%
# dplyr::filter(!is.na(DateTime), TotalFlags < 2,
#               Latitude!=0, Longitude !=0,
#               TimeDiffMins < 100,
#               Altitude > 2700/3.3, Altitude< 6000/3.3, # lower and upper limits (converted from feet to meters)
#               Latitude >= window$latmin,  Latitude <= window$latmax,
#               Longitude >= window$lonmin,  Longitude <= window$lonmax,
#               !DistanceFlag )
}
dftest <- read.csv("data/sample_location_data.csv")
xx <- clean_locations(dftest)
dftest <- read.csv("data/sample_location_data.csv", skipNul = T)
xx <- clean_locations(dftest)
clean_locations<- function (df, aniid, gpsid){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(Animal = as.factor(Animal))  %>%                     # reclassify Animal column as a categorical (factor) variable
dplyr::mutate(DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone)) %>%  # reclassify Date as a Date variable
dplyr::mutate(Date = as.Date(Date, "%Y/%m/%d"))  %>%            # reclassify Date as a Date variable
dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) #compute geodesic distance between points
# dplyr::mutate(RateFlag = 1*(Rate > 84)) %>%  # flag any data points representing too fast travel
# dplyr::mutate(CourseFlag = 1*(CourseDiff >= 100) ) %>%
# dplyr::mutate(DistanceFlag = 1*(DistGeo >= 840 )) %>%
# dplyr::mutate(TotalFlags = RateFlag + CourseFlag + DistanceFlag) %>%
# dplyr::filter(!is.na(DateTime), TotalFlags < 2,
#               Latitude!=0, Longitude !=0,
#               TimeDiffMins < 100,
#               Altitude > 2700/3.3, Altitude< 6000/3.3, # lower and upper limits (converted from feet to meters)
#               Latitude >= window$latmin,  Latitude <= window$latmax,
#               Longitude >= window$lonmin,  Longitude <= window$lonmax,
#               !DistanceFlag )
}
dftest <- read.csv("data/sample_location_data.csv", skipNul = T)
xx <- clean_locations(dftest, 99, 100)
clean_locations<- function (df, aniid = NA, gpsid = NA, timezone = "UTC"){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(Animal = as.factor(Animal))  %>%                     # reclassify Animal column as a categorical (factor) variable
dplyr::mutate(DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone)) %>%  # reclassify Date as a Date variable
dplyr::mutate(Date = as.Date(Date, "%Y/%m/%d"))  %>%            # reclassify Date as a Date variable
dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) #compute geodesic distance between points
# dplyr::mutate(RateFlag = 1*(Rate > 84)) %>%  # flag any data points representing too fast travel
# dplyr::mutate(CourseFlag = 1*(CourseDiff >= 100) ) %>%
# dplyr::mutate(DistanceFlag = 1*(DistGeo >= 840 )) %>%
# dplyr::mutate(TotalFlags = RateFlag + CourseFlag + DistanceFlag) %>%
# dplyr::filter(!is.na(DateTime), TotalFlags < 2,
#               Latitude!=0, Longitude !=0,
#               TimeDiffMins < 100,
#               Altitude > 2700/3.3, Altitude< 6000/3.3, # lower and upper limits (converted from feet to meters)
#               Latitude >= window$latmin,  Latitude <= window$latmax,
#               Longitude >= window$lonmin,  Longitude <= window$lonmax,
#               !DistanceFlag )
}
dftest <- read.csv("data/sample_location_data.csv", skipNul = T)
xx <- clean_locations(dftest)
summary(xx)
install.packages("forecast")
library(forecast)
xx %>%
tsclean() %>%
autoplot()
names(xx)
xx$Latitude %>%
tsclean() %>%
autoplot()
xx %>%
select(x = Date, y = Latitude) %>%
autoplot()
?autoplot
library(ggplot2)
ggplot( xx %>%
select(Date, Latitude) ) +
geom_line()
ggplot( xx %>%
select(x = Date, y = Latitude) , aes(x = x, y=y) ) +
geom_line()
?tsclean
zz <- tsclean(xx$Latitude)
plot(zz)
zz <- tsclean(xx$Latitude)
length(zz)
nrow(xx)
?tsoutliers
yy<- tsoutliers(xx$Latitude)
names(yy)
head(yy$index)
clean_locations<- function (df, aniid = NA, gpsid = NA, timezone = "UTC", window =  list(latmax = 43.3464, lonmin = -117.2305, latmin = 43.2472, lonmax=-117.101 )){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(Animal = as.factor(Animal))  %>%                     # reclassify Animal column as a categorical (factor) variable
dplyr::mutate(DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone)) %>%  # reclassify Date as a Date variable
dplyr::mutate(Date = as.Date(Date, "%Y/%m/%d"))  %>%            # reclassify Date as a Date variable
dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) %>% #compute geodesic distance between points
dplyr::mutate(RateFlag = 1*(Rate > 84)) %>%  # flag any data points representing too fast travel
dplyr::mutate(CourseFlag = 1*(CourseDiff >= 100) ) %>%
dplyr::mutate(DistanceFlag = 1*(DistGeo >= 840 )) %>%
dplyr::mutate(TotalFlags = RateFlag + CourseFlag + DistanceFlag) %>%
dplyr::filter(!is.na(DateTime), TotalFlags < 2,
Latitude!=0, Longitude !=0,
TimeDiffMins < 100,
Altitude > 2700/3.3, Altitude< 6000/3.3, # lower and upper limits (converted from feet to meters)
Latitude >= window$latmin,  Latitude <= window$latmax,
Longitude >= window$lonmin,  Longitude <= window$lonmax,
!DistanceFlag )
}
dftest <- read.csv("data/sample_location_data.csv", skipNul = T)
xx <- clean_locations(dftest)
clean_locations_auto<- function (df, aniid = NA, gpsid = NA, timezone = "UTC"){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(
Latitude = forecast::tsclean(Latitude),
Longitude = forecast::tsclean(Longitude),
Altitude = forecast::tsclean(Altitude),
Rate = forecast::tsclean(Rate),
Distance = forecast::tsclean(Distance)
) %>%
dplyr::mutate(Animal = as.factor(Animal))  %>%                     # reclassify Animal column as a categorical (factor) variable
dplyr::mutate(DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone)) %>%  # reclassify Date as a Date variable
dplyr::mutate(Date = as.Date(Date, "%Y/%m/%d"))  %>%            # reclassify Date as a Date variable
dplyr::mutate(TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1))) %>%  # compute sequential time differences (in seconds)
dplyr::mutate(TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")))  %>% # compute sequential time differences (in mins)
dplyr::mutate(Rate = Distance/TimeDiffMins) %>% # compute rate of travel (meters/min)
dplyr::mutate(CourseDiff = abs(Course - dplyr::lag(Course,1))) %>%
dplyr::mutate(DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1))
) ) %>%
#compute geodesic distance between points
dplyr::mutate(
RateFlag = 1*(Rate > 84), # flag any data points representing too fast travel
CourseFlag = 1*(CourseDiff >= 100) ,
DistanceFlag = 1*(DistGeo >= 840 ),
TotalFlags = RateFlag + CourseFlag + DistanceFlag
) %>%
dplyr::filter(!is.na(DateTime), TotalFlags < 2,
TimeDiffMins < 100,
!DistanceFlag )
}
xx2 <- clean_locations_auto(dftest)
summary(dftest)
clean_locations_auto<- function (df, aniid = NA, gpsid = NA, timezone = "UTC"){
require(dplyr)
require(tibble)
df %>%
tibble::add_column(Order = df$Index, .before="Index")%>%  # add Order column
tibble::add_column(Animal = aniid, .after="Index") %>%      # add Animal column
tibble::add_column(GPS = gpsid, .after="Animal") %>%      # add Animal column
tibble::add_column(DateTime = NA, .after="GPS") %>%      # add Date/Time column
tibble::add_column(TimeDiff = NA, .after="DateTime") %>%
tibble::add_column(TimeDiffMins = NA, .after="TimeDiff") %>%
tibble::add_column(Rate = NA, .after="Distance") %>%
tibble::add_column(CourseDiff = NA, .after="Course") %>%
dplyr::mutate(
Latitude = forecast::tsclean(Latitude),
Longitude = forecast::tsclean(Longitude),
Altitude = forecast::tsclean(Altitude),
Distance = forecast::tsclean(Distance),
Animal = as.factor(Animal), # reclassify Animal column as a categorical (factor) variable
DateTime = as.POSIXct(paste(Date, Time), "%Y/%m/%d %H:%M:%S", tz=timezone), # reclassify Date as a Date variable
Date = as.Date(Date, "%Y/%m/%d"), # reclassify Date as a Date variable
TimeDiff = as.numeric(DateTime - dplyr::lag(DateTime,1)), # compute sequential time differences (in seconds)
TimeDiffMins = as.numeric(difftime(DateTime,dplyr::lag(DateTime,1), units="mins")), # compute sequential time differences (in mins)
Rate = Distance/TimeDiffMins, # compute rate of travel (meters/min),
CourseDiff = abs(Course - dplyr::lag(Course,1)),
DistGeo = geosphere::distGeo(cbind(Longitude, Latitude),
cbind(dplyr::lag(Longitude,1), dplyr::lag(Latitude, 1) )), #compute geodesic distance between points
RateFlag = 1*(Rate > 84), # flag any data points representing too fast travel
CourseFlag = 1*(CourseDiff >= 100) ,
DistanceFlag = 1*(DistGeo >= 840 ),
TotalFlags = RateFlag + CourseFlag + DistanceFlag
) %>%
dplyr::filter(!is.na(DateTime), TotalFlags < 2,
TimeDiffMins < 100,
!DistanceFlag )
}
xx2 <- clean_locations_auto(dftest)
nrow(xx2)
nrow(xx)
library(devtools)
document()
load_all()
dev_add_to_gitignore()
dev_add_to_gitignore("")
dev_add_to_gitignore("data"
)
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
library(devtools)
document()
build(manual=TRUE)
load_all()
run_shiny_animaltracker()
?addDrawToolbar
load_all()
?addDrawToolbar
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
load_all()
run_shiny_animaltracker()
document()
load_all()
library(devtools
)
load_all()
run_shiny_animaltracker()
library(devtools)
install_github("mathedjoe/animaltracker")
library(animaltracker)
run_shiny_animaltracker()
library(devtools)
load_all()
run_shiny_animaltracker()
library(devtools)
install_github("mathedjoe/animaltracker/dev")
install_github("mathedjoe/animaltracker", ref="dev")
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
?req
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
run_shiny_animaltracker()
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
source('~/Desktop/Dev/animaltracker/R/data_storage.R')
source('~/Desktop/Dev/animaltracker/R/data_cleaning.R')
source('~/Desktop/Dev/animaltracker/R/data_processing.R')
test <- lapply(list.files("inst/extdata/temp", pattern ="*.csv", recursive = TRUE, full.names = T), read.csv, skipNul = T)
View(test)
test_clean <- lapply(test, clean_location_data)
View(test_clean)
lapply(test_clean[6:22], lookup_elevation)
lapply(suppressWarnings(dplyr::bind_rows(test_clean[6:22]), lookup_elevation))
test_elev <- lapply(suppressWarnings(dplyr::bind_rows(test_clean[6:22])), lookup_elevation)
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean[6:22])))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean[1:5])))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)))
test_elev <- lookup_elevation(test_clean[[5]])
test_elev <- lookup_elevation(test_clean[[17]])
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:100000]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:100000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:50000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:40000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:30000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[70000:100000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[30000:60000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[70000:110000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[70000:120000,]))
test <- lapply(list.files("inst/extdata/temp", pattern ="*.csv", recursive = TRUE, full.names = T), read.csv, skipNul = T)
test_clean <- lapply(test, clean_location_data)
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:40000,]))
test_elev <- lookup_elevation(suppressWarnings(dplyr::bind_rows(test_clean)[1:30000,]))
View(test_elev)
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
library(animaltracker)
run_shiny_animaltracker()
View(test_clean)
test <- list.files("temp", pattern ="*.csv", recursive = TRUE, full.names = T) %>%lapply()
test <- list.files("temp", pattern ="*.csv", recursive = TRUE, full.names = T) %>% lapply(read.csv, skipNul = T)
test_clean <- lapply(test_clean, clean_location_data)
test_clean <- lapply(test, clean_location_data)
test_all <- suppressWarnings(dplyr::bind_rows(test_clean))
plot(test_all$Latitude)
?boxplot
boxplot(test_all$Latitude)
boxplot(test_all$Latitude, horizontal=T)
min(test_all$Latitude)
range(test_all$Latitude)
range(test_all$Longitude)
median(Latitude)
median(test_all$Latitude)
median(test_all$Longitude)
IQR(test_all$Longitude)
boxplot(test_all$Longitude, horizontal=T)
mean(test_all$Latitude)
mean(test_all$Longitude)
nrow(dplyr::filter(test_clean[[5]], Longitude >= -110))
nrow(dplyr::filter(test_clean[[5]], Longitude >= -100))
nrow(dplyr::filter(test_clean[[5]], Longitude >= -105))
nrow(dplyr::filter(test_clean[[5]], Longitude >= -100))
nrow(dplyr::filter(test_clean[[5]], Longitude >= -115))
nrow(dplyr::filter(test_clean[[5]], Longitude >= -117))
nrow(dplyr::filter(test_clean[[5]], Longitude >= median(Longitude) - 5, Longitude <= median(Longitude) + 5))
