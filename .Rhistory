for (dataname in names(anidata)){
df<- anidata[[dataname]]
df$data_src <- dataname
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
dbDisconnect(con)
}
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
dbDisconnect(animaldb)
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
file.remove(dbfilepath)
}
db <- DBI::dbConnect (RSQLite::SQLite(), dbname = dbfilepath)
for (dataname in names(anidata)){
df<- anidata[[dataname]]
df$data_src <- dataname
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
dbDisconnect(db)
}
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
file.remove(dbfilepath)
}
db <- DBI::dbConnect (RSQLite::SQLite(), dbname = dbfilepath)
for (dataname in names(anidata)){
df<- anidata[[dataname]]
df$data_src <- dataname
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
file.remove(dbfilepath)
}
db <- DBI::dbConnect (RSQLite::SQLite(), dbname = dbfilepath)
for (dataname in names(gpsdata)){
df<- gpsdata[[dataname]]
df$data_src <- dataname
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
?`dbConnect,SQLiteConnection-method`
lapply(anidata, dim)
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
file.remove(dbfilepath)
}
# connect to the database
db <- DBI::dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
if(nrow(df) > 0 ){
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
}
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database (anidata, "data/animaldb.sqlite")
# save gps data to an sqlite database (optionally (re)create the database)
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
if(nrow(df) > 0 ){
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
}
dbListTables(db)
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
# save gps data to an sqlite database (optionally (re)create the database)
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
if(nrow(df) > 0 ){
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
}
print(dbListTables(db))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
get_gps_data<- function(dbfilepath, opts = NULL, tblname = "gps"){
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
df <- tbl(db, tblname)
return(df)
}
gpsdf <- "data/animaldb.sqlite"
summary(gpsdf)
summary(as.data.frame(gpsdf))
get_gps_data<- function(dbfilepath, opts = NULL, tblname = "gps"){
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
df <- tbl(db, tblname)
return(df)
}
gpsdf <- get_gps_data("data/animaldb.sqlite")
summary(as.data.frame(gpsdf))
gpsdf %>% data_src %>% table
gpsdf %>% select(data_src) %>% table
vars(gpsdf)
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
if(nrow(df) > 0 ){
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
}
print(paste("to confirm, the tables in this database are:", dbListTables(db) ) )
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
table(anidata[sapply(anidata, function(df)nrow(df)>0)])
table(sapply(anidata, function(df)nrow(df)>0))
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata), function(df)nrow(df)>0]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
print(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":\n", names(gpsdata) ) )
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
print(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":\n", names(gpsdata) ) )
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
writeLines(names(gpsdata)  )
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(names(gpsdata)  )
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(unquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, datasite, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_site <- datasite
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, datasite, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_site <- datasite
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "initial sample", "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, datasite, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df$data_site <- datasite
df$data_src <- dataname
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "initial sample", "data/animaldb.sqlite")
save_gps_to_database<- function(gpsdata, datasite, dbfilepath, overwrite = TRUE){
if(overwrite & file.exists(dbfilepath)){
unlink(dbfilepath)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfilepath)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df %>%
mutate(data_site = datasite,
data_src = dataname)
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfilepath, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "initial sample", "data/animaldb.sqlite")
db <- dbConnect (RSQLite::SQLite(),
dbname = "data/animaldb.sqlite")
df <- dbSendQuery(db,
'SELECT * FROM gps WHERE data_src = cow1149')
df <- dbSendQuery(db,
'SELECT * FROM gps WHERE "data_src" == "cow1149"')
summary(df)
df <- dbGetQuery(db,
'SELECT * FROM gps WHERE "data_src" == "cow1149"')
head(df)
save_gps_to_database<- function(gpsdata, datasite, dbfile, overwrite = TRUE){
if(overwrite & file.exists(dbfile)){
unlink(dbfile)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfile)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df %>%
mutate(data_site = datasite,
data_src = dataname)
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfile, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "initial sample", "data/animaldb.sqlite")
get_gps_data<- function(dbfile, query = 'SELECT * FROM gps LIMIT 100'){
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfile)
df <- dbGetQuery(db,
query)
return(df)
}
get_gps_data(dbfile = "data/animaldb.sqlite",
query = 'SELECT * FROM gps WHERE "data_src" == "cow1149"')
save_gps_to_database<- function(gpsdata, datasite, dbfile, overwrite = TRUE){
if(overwrite & file.exists(dbfile)){
unlink(dbfile)
}
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfile)
# discard any empty data frames from gpsdata
gpsdata<- gpsdata[sapply(gpsdata, function(df)nrow(df)>0)]
# insert gps data to the database
for (dataname in names(gpsdata)){
# get the data frame
df<- gpsdata[[dataname]]
# add the data source
df %>%
mutate(data_site = datasite,
data_src = dataname)
# save to database
RSQLite::dbWriteTable(db, "gps", df, append=TRUE, row.names = FALSE)
}
writeLines(paste("wrote the following data to the", dbListTables(db), "table in", dbfile, ":") )
print(noquote(names(gpsdata)  ))
# close the database connection
dbDisconnect(db)
}
save_gps_to_database (anidata, "initial sample", "data/animaldb.sqlite")
# retrieve gps data from an sqlite database
# (uses a list of opts to specify the query)
get_gps_data<- function(dbfile, query = 'SELECT * FROM gps LIMIT 100'){
# connect to the database
db <- dbConnect (RSQLite::SQLite(),
dbname = dbfile)
df <- dbGetQuery(db,
query)
return(df)
}
df<- get_gps_data(dbfile = "data/animaldb.sqlite",
query = 'SELECT * FROM gps WHERE "data_src" == "cow1149"')
summary(df)
library(devtools)
build(manual=T)
build(manual=T)
load_all()
document()
?animaltracker
library(animaltracker)
?animaltracker
install.packages("animaltracker", type="source")
install.packages("animaltracker", type = "source")
install.packages("animaltracker", type = "source", repos=NULL)
install.packages("animaltracker", type = "source", repos=F)
install.packages("animaltracker", type = "source", repos=NULL)
install.packages("../animaltracker", type = "source", repos=NULL)
library(animaltracker)
?animaltracker
