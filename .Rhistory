run_shiny_cowtrackr()
install.packages("../cowtrackr", source="local")
install.packages("cowtrackr", source="local")
setwd("../")
install.packages("cowtrackr", source="local")
install.packages("cowtrackr", type="source")
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
setwd("../"
)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
dir(full.names=T)
dir("cowtrackr", full.names=T)
dir("cowtrackr/R", full.names=T)
install.packages("cowtrackr", type="source", repos=NULL)
library(cowtrackr)
run_shiny_cowtrackr
run_shiny_cowtrackr()
setwd("../")
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("shiny")
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("xts")
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("tidyr")
install.packages("cowtrackr", type="source", repos=NULL)
install.packages("raster")
install.packages("cowtrackr", type="source", repos=NULL)
library("cowtrackr")
run_shiny_cowtrackr()
library("cowtrackr")
run_shiny_cowtrackr()
install.packages("cowtrackr", type="source", repos=NULL)
run_shiny_cowtrackr()
library("cowtrackr")
run_shiny_cowtrackr()
runApp('cowtrackr/R')
install.packages("cowtrackr", type="source", repos=NULL)
library("cowtrackr")
run_shiny_cowtrackr()
install.packages("cowtrackr", type="source", repos=NULL)
library("cowtrackr")
run_shiny_cowtrackr()
run_shiny_cowtrackr()
run_shiny_cowtrackr
setwd("cowtrackr")
library(devtools)
devtools::load_all()
run_shiny_cowtrackr
run_shiny_cowtrackr()
devtools::check()
devtools::load_all()
run_shiny_cowtrackr()
devtools::load_all()
run_shiny_cowtrackr()
run_shiny_cowtrackr()
devtools::document()
devtools::document()
devtools::document(compile=T)
shiny::runApp('R')
runApp('R')
install.packages("../cowtrackr", type="source", repos= NULL)
install.packages("elevatr")
install.packages("../cowtrackr", type="source", repos= NULL)
library(cowtrackr)
runApp('R')
run_shiny_cowtrackr("")
devtools::build_manual()
devtools::load("cowtrackr")
devtools::build()
devtools::install()
devtools::load_all()
?devtools
library(devtools)
install.packages("devtools")
library(devtools)
load_all()
load_all()
load_all()
run_shiny_animaltracker("data")
?bind_rows
?load_all
build()
install()
install.packages("dplyr")
install.packages("dplyr")
library(devtools)
install()
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
install.packages("Rcpp")
install()
install.packages("rlang")
install.packages("rlang")
library(devtools)
install()
library(animaltracker)
?qqplot_time
load_all()
run_shiny_animaltracker("data")
load_all()
run_shiny_animaltracker("data")
run_shiny_animaltracker("data/animal_data_with_elev.rds")
run_shiny_animaltracker("data/animal_data_with_elev.rds")
load_all()
run_shiny_animaltracker("data/animal_data_with_elev.rds")
?require
load_all()
run_shiny_animaltracker("data/animal_data_with_elev.rds")
load_all()
run_shiny_animaltracker("data/animal_data_with_elev.rds")
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
load_all()
clean_export_files()
clean_export_files
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
?distGeo
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
?dir.create
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
load_all()
clean_export_files( "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/to_process", "data/cowGPS.rds")
estimate_elevation_dem <- function(rds_path, tif_dir) {
spdf <- get_spdf(rds_path)
dem_file <- list.files(tif_dir, pattern=".tif", full.names = T)
DEM <- raster(dem_file)
DEM.gps <- projectRaster(DEM, crs = crs(spdf))
return(DEM.gps)
}
gpselev <- estimate_elevation_dem( rds_path =  "data/cowGPS.rds", tif_dir = "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/elevation")
?SpatialPointsDataFrame
get_spdf <- function(rds_path) {
df <- readRDS(rds_path)
spdf <- sp::SpatialPointsDataFrame(coords = df[c("Longitude", "Latitude")], data = df,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
return(spdf)
}
#'
#'Estimate elevation data via Digital Elevation Model (DEM) from existing GPS data (.rds)
#'
#'@param rds_path path to the GPS data (.rds)
#'@param tif_dir local directory path of DEM files (.tif)
#'@return projection of elevation points on spatial points from GPS data
#'
estimate_elevation_dem <- function(rds_path, tif_dir) {
spdf <- get_spdf(rds_path)
dem_file <- list.files(tif_dir, pattern=".tif", full.names = T)
DEM <- raster(dem_file)
DEM.gps <- projectRaster(DEM, crs = crs(spdf))
return(DEM.gps)
}
gpselev <- estimate_elevation_dem( rds_path =  "data/cowGPS.rds", tif_dir = "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/elevation")
get_spdf <- function(rds_path) {
df <- readRDS(rds_path)
print(names(df))
spdf <- sp::SpatialPointsDataFrame(coords = df[c("Longitude", "Latitude")], data = df,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
return(spdf)
}
gpselev <- estimate_elevation_dem( rds_path =  "data/cowGPS.rds", tif_dir = "C:/Users/joechampion/Google Drive/Research/GPS_Arispe_2018/data/elevation")
?projectRaster
get_elevation <- function(latmin, latmax, lonmin, lonmax, out_dir, zoom = 12, zone =11) {
data_region <- sp::bbox(cbind(c(lonmin, lonmax), c(latmin,latmax))) # set a bounding box for retrieval of elev data
elev <- elevatr::get_aws_terrain( data_region, z=zoom, prj = "+proj=longlat") # retrieve high res elev data
elev2 <- raster::projectRaster(elev, crs = paste0("+proj=utm +zone=", zone, " ellps=WGS84") )
elevpts <- raster::rasterToPoints(elev2, spatial=TRUE) # convert to spatial pts
if(!dir.exists(out_dir)){
dir.create(out_dir, recursive = TRUE)
}
saveRDS(elevpts, file.path(out_dir, "elev_data.rds"))
return(elevpts)
}
get_elevation(latmin = 43.1,
latmax = 43.5,
lonmin = -117.6,
lonmax = -117.0,
out_path = "data/elevation")
get_elevation(latmin = 43.1,
latmax = 43.5,
lonmin = -117.6,
lonmax = -117.0,
out_dir = "data/elevation")
get_elevation <- function(latmin, latmax, lonmin, lonmax, out_dir, zoom = 12, zone =11) {
data_region <- sp::bbox(cbind(c(lonmin, lonmax), c(latmin,latmax))) # set a bounding box for retrieval of elev data
elev <- elevatr::get_aws_terrain( data_region, z=zoom, prj = "+proj=longlat") # retrieve high res elev data
elev2 <- raster::projectRaster(elev, crs = paste0("+proj=utm +zone=", zone, " ellps=WGS84") )
elevpts <- raster::rasterToPoints(elev2, spatial=TRUE) # convert to spatial pts
if(!dir.exists(out_dir)){
dir.create(out_dir, recursive = TRUE)
}
saveRDS(elevpts, file.path(out_dir, "elev_data.rds"))
return(elevpts)
}
get_elevation(latmin = 43.1,
latmax = 43.5,
lonmin = -117.6,
lonmax = -117.0,
out_dir = "data/elevation")
get_elevation(latmin = 41,
latmax = 45,
lonmin = -118,
lonmax = -111,
out_dir = "data/elevation")
get_elevation(latmin = 43.1,
latmax = 43.5,
lonmin = -117.6,
lonmax = -117,
out_dir = "data/elevation") # doesn't work?
library(devtools)
document()
load_all()
document()
?model_animal_elevation
build(manual=T)
install.packages("pdflatex")
installr::install.MikTeX()
devtools::install_github('talgalili/installr')
installr::install.MikTeX()
?install.MikTeX
?install.MikTeX()
?installr::install.MikTeX
build(manual=T)
install.packages("pandoc")
Sys.which("pdflatex")
Sys.which("pdflatex")
library(devtools)
build(manual=T)
?document
devtools::check(manual=TRUE)
build()
check()
?build
build(binary=T, manual=T)
build(manual=T)
library(RSQLite)
install.packages("RSQLite")
package_version("RSQLite")
library()
library(RSQLite)
package_version("RSQLite")
package_version(RSQLite)
packageVersion(RSQLite)
packageVersion("RSQLite")
install.packages("dbplyr")
packageVersion("dbplyr")
library(dbplyr)
?copy_to.src_sql
# # Creating a new database - provide the filename to dbConnect()
#
animaldb <- dbConnect (RSQLite::SQLite(), dbname = "animaldb.sqlite")
gps_meta <- data.frame(id = 1:3,
site = c("47 ranch", "47 ranch", "3 fingers"),
filename = paste0(letters[1:3], ".csv"),
)
gps_meta <- data.frame(id = 1:3,
site = c("47 ranch", "47 ranch", "3 fingers"),
filename = paste0(letters[1:3], ".csv")
)
View(gps_meta)
copy_to(animaldb, gps_meta)
dbplyr::copy_to(animaldb, gps_meta)
animaldb <- dbConnect (RSQLite::SQLite(), dbname = "animaldb.sqlite")
gps_meta <- data.frame(id = 1:3,
site = c("47 ranch", "47 ranch", "3 fingers"),
filename = paste0(letters[1:3], ".csv")
)
dbplyr::copy_to(animaldb(), gps_meta)
dplyr::copy_to(animaldb(), gps_meta)
animaldb <- dbConnect (RSQLite::SQLite(), dbname = "animaldb.sqlite")
gps_meta <- data.frame(id = 1:3,
site = c("47 ranch", "47 ranch", "3 fingers"),
filename = paste0(letters[1:3], ".csv")
)
dplyr::copy_to(animaldb, gps_meta)
#
View(animaldb)
tbl(animaldb, "gps_meta")
dbplyr::tbl(animaldb, "gps_meta")
dplyr::tbl(animaldb, "gps_meta")
anidata <- readRDS("data/animal_data_with_elev.rds")
anidata <- readRDS("data/animal_data_with_elev.rds")
for (df in anidata){
dplyr::copy_to(animaldb, df)
}
?copy_to
anidata <- readRDS("data/animal_data_with_elev.rds")
animaldb <- dbConnect (RSQLite::SQLite(), dbname = "animaldb.sqlite")
gps_meta <- data.frame(id = 1:3,
site = c("47 ranch", "47 ranch", "3 fingers"),
filename = paste0(letters[1:3], ".csv")
)
names(anidata)
for (dataname in names(anidata)){
dplyr::copy_to(animaldb, anidata[[dataname]], name = dataname)
}
dplyr::tbl(animaldb, "cow1149")
str(animaldb)
animaldb %>%
group_by(Cow) %>%
summarise(alt = mean(Altitude, na.rm=T))
library(dbplyr)
library(dplyr)
animaldb %>%
group_by(Cow) %>%
summarise(alt = mean(Altitude, na.rm=T))
animaldb %>%
select(Cow)
