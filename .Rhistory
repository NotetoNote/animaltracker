tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filename = function() {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
paste(tools::file_path_sans_ext(filestr), "-flags", ".csv", sep="")
}
},
content = function(file) {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
}
} #content
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
run_birdproofr_app()
library(shiny)
run_birdproofr_app()
library(birdproofr)
library(birdproofr)
run_birdproofr_app()
#'
#'Runs birdproofr Shiny app
#'@export
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr (v1.0.1)"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath, stringsAsFactors = F)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filename = function() {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
paste(tools::file_path_sans_ext(filestr), "-flags", ".csv", sep="")
}
},
content = function(file) {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
}
} #content
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
#'
#'Validate all columns, then store issues as a list of data frames
#'
#'@param df bird data frame
#'@return list of issue data frames
#'@export
#'
validate_all_list <- function(df) {
all_list <- list(validate_species(df), validate_age(df), validate_sex(df),
validate_age_bp_cp(df), validate_sex_hs(df), validate_bp_hs(df),
validate_cp_hs(df), validate_ffmolt(df), validate_bp(df),
validate_cp(df), validate_fat(df), validate_bmlt(df),
validate_ffwear(df), validate_muscle(df), validate_age_skull(df),
validate_ha_skull(df), validate_location(df), validate_bandsize(df),
validate_bandsize_disp(df), validate_age_ffmlt(df), validate_ha_ffmlt(df),
validate_ha_ffwear(df), validate_age_ffwear(df), validate_wing(df),
validate_tail(df), validate_weight(df), validate_bandcode(df),
validate_bandcode_species(df), validate_status(df), validate_status_500(df),
validate_disp(df), validate_disp_status(df), validate_year(df),
validate_year_species(df), validate_month(df), validate_month_species(df),
validate_day(df), validate_day_species(df), validate_captime(df),
validate_net(df), validate_notes(df), validate_ey(df),
validate_age_ha(df), validate_age_hs(df), validate_parasites(df),
validate_ha_ha2(df), validate_hs_hs2(df)
)
return(all_list)
}
#'
#'Validate species column. Refer to master species list to update
#'
#'@param df bird data frame
#'@return data frame of rows with species issues
#'@export
#'
validate_species <- function(df) {
valid_species_list <- c("amgo", "amke", "amre", "amro", "auwa", "bade", "balo", "bcch", "bewr", "bggn",
"bhco", "bhgr", "brcr", "brsp", "btyw", "buor", "bush", "cafi", "cahu", "canw", "caqu", "cavi", "cbch",
"cedw", "chsp", "coha", "coni", "copo", "deju", "dowo", "dufl", "evgr", "flow", "fosp", "gcki", "gcsp",
"grca", "grfl", "gtto", "gwcs", "hafl", "hawo", "heth", "hewa", "hofi", "howr", "lazb", "lefl", "lego",
"lisp", "mgwa", "moch", "mwcs", "mywa", "nawa", "nofl", "nopo", "ocwa", "orju", "osfl", "pawr", "pisi",
"rbnu", "rcki", "recr", "rnsa", "rowr", "rsfl", "sath", "savs", "sosp", "spto", "ssha", "stja", "swth",
"tewa", "toso", "towa", "udej", "uyrw", "vath", "vesp", "wavi", "wbnu", "wcsp", "webl", "wefl", "weta",
"wewp", "wifl", "wiwa", "ybch", "yewa", "yrwa")
species <- tolower(df$SPECIES)
species_issues <- filter(df, !(species %in% valid_species_list))
if(nrow(species_issues) != 0) {
species_issues[,"Issue"] <- "Species is rare or does not exist"
}
return(species_issues)
}
source('~/birdproofr/R/data_validation.R')
run_birdproofr_app()
source('~/animaltracker/R/data_storage.R')
source('~/animaltracker/R/data_storage.R')
#'
#'You can run the animaltracker Shiny app by calling this function.
#'
#'@param rds_path Path of Animal data file to input
#'@export
run_shiny_animaltracker <- function() {
require("shiny")
require("leaflet")
require("ggplot2")
require("shinyWidgets")
options(shiny.maxRequestSize=30*1024^2)
# Define UI for application
ui <- fluidPage(
titlePanel("Animal Tracker App"),
sidebarLayout(
sidebarPanel(
tabsetPanel(type="tabs",
tabPanel("Upload Data",
fileInput("zipInput", "Compressed Folder", accept=c(".zip", ".7z"))
),
tabPanel("Choose Data",
uiOutput("choose_site"),
uiOutput("choose_data"),
uiOutput("choose_dates"),
uiOutput("choose_times")
)
)#sidebarPanel
),#sidebarLayout
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plots",  fluidRow(
column(8,
leafletOutput("mainmap", height = 640),
plotOutput("plot1"),
plotOutput("plot2")
)
)),
tabPanel("Statistics")
)
) #mainPanel
) #sidebarLayout
) #fluidPage
# Define server logic required to draw a histogram
server <- function(input, output, session) {
meta <- reactive({
if(is.null(input$zipInput)) {
return()
}
clean_batch(input$zipInput)
})
# Load data
# Drop-down selection box for which sites
output$choose_site <- renderUI({
if(nrow(meta()) == 0) {
return()
}
meta <- meta()
pickerInput("selected_site", "Filter by Site",
choices = as.list(as.character(unique(meta$site))),
multiple = TRUE,
inline = FALSE, options = list(`actions-box` = TRUE)
)
})
# Drop-down selection box for which animals
output$choose_data <- renderUI({
if(is.null(input$selected_site)) {
return()
}
meta <- meta() %>%
dplyr::filter(site %in% input$selected_site)
pickerInput("selected_ani", "Filter by Animal ID",
choices = as.list(as.character(unique(meta$ani_id))),
multiple = TRUE,
inline = FALSE, options = list(`actions-box` = TRUE)
)
})
# date range
output$choose_dates <- renderUI({
# If missing input, return to avoid error later in function
if(is.null(input$selected_ani))
return()
# Get the data set with the appropriate name
meta <- meta() %>%
dplyr::filter(ani_id %in% input$selected_ani)
max_dates <- meta$max_date
min_dates <- meta$min_date
sliderInput("dates", "Date Range", min = min(min_dates),
max = max(max_dates), value = c(min(min_dates), max(max_dates)), step = 1,
animate = animationOptions(loop = FALSE, interval = 1000))
})
output$choose_times <- renderUI({
# If missing input, return to avoid error later in function
if(is.null(input$selected_ani))
return()
dat_no_time <- dat_no_time()
min_times <- min(dat_no_time$DateTime)
max_times <- max(dat_no_time$DateTime)
sliderInput("times", "Time Range", min = min_times,
max = max_times, value = c(min_times, max_times), step = 1,
animate = animationOptions(loop = FALSE, interval = 1000))
})
dat_no_time <- reactive({
if(is.null(input$selected_ani) || is.null(input$dates))
return()
meta <- meta() %>%
dplyr::filter(ani_id %in% input$selected_ani)
current_df <- get_data_from_meta(meta, input$dates[1], input$dates[2])
})
dat <- reactive({
if(is.null(input$times)) {
return()
}
current_df <- dat_no_time() %>%
dplyr::filter(DateTime >= input$times[1],
DateTime <= input$times[2])
})
points <- reactive({
# If missing input, return to avoid error later in function
if(is.null(input$selected_ani) || is.null(input$dates))
return()
SpatialPointsDataFrame(coords = dat()[c("Longitude", "Latitude")], data = dat(),
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
})
output$mainmap <- renderLeaflet({
if(is.null(input$selected_ani) || is.null(input$dates) )
return()
factpal <- colorFactor(hue_pal()(length(input$selected_ani)), input$selected_ani)
leaflet() %>%  # Add tiles
addTiles() %>%
# addProviderTiles("OpenTopoMap") %>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
# addProviderTiles("Thunderforest.Landscape", group = "Topographical") %>%
# addProviderTiles("OpenStreetMap.Mapnik", group = "Road map") %>%
addCircleMarkers(data = points(), radius=6, fillOpacity = .6, stroke=F,
color = ~ factpal(Animal),
popup = ~ paste(paste("<h4>",paste("Animal ID:", points()$Animal), "</h4>"),
paste("Date/Time:", points()$DateTime),
paste("Altitude:", points()$Altitude),
paste("Elevation:", points()$Elevation),
paste("Lat/Lon:", paste(points()$Latitude, points()$Longitude, sep=", ")),
sep="<br/>")
)
# leaflet() %>%
#   addMarkers(data = points(),popup=as.character(points()$a))
})
output$plot1 <- renderPlot({
if(is.null(input$selected_ani) || is.null(input$dates))
return()
# hist(dat()$TimeDiffMin [dat()$TimeDiffMin < 100], main = "Distribution of Time Between GPS Measurements" )
ggplot(dat(), aes(x=DateTime, y=Elevation, group=Animal, color=Animal)) +
labs( title = "Elevation (meters) during Data Collection")+
ylim(1000,2000)+geom_line() +
geom_point() +
theme_minimal()
})
output$plot2 <- renderPlot({
if(is.null(input$selected_ani) || is.null(input$dates))
return()
ggplot(dat(), aes(x=TimeDiffMins, fill=Animal))+
geom_histogram(  col="White", breaks = seq(0,40, 2)) +
facet_wrap(~Animal, ncol=2)+
labs( title = "Distribution of Time between GPS Readings, by GPS Unit" )+
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
run_shiny_animaltracker()
help(coordinates)
library(sp)
library(rgdal)
library(nabor)
source('~/animaltracker/R/data_storage.R')
run_shiny_animaltracker()
run_shiny_animaltracker()
source('~/animaltracker/R/data_storage.R')
run_shiny_animaltracker()
run_shiny_animaltracker()
source('~/animaltracker/R/data_storage.R')
run_shiny_animaltracker()
source('~/animaltracker/R/data_storage.R')
run_shiny_animaltracker()
test_df <- read.csv("test_dir/Bannock_2017_120_2279.csv")
?read.csv
test_df <- read.csv("test_dir/Bannock_2017_120_2279.csv", skipNul = T)
source('~/animaltracker/R/data_storage.R')
source('~/animaltracker/R/data_storage.R')
test_clean <- clean_df(test_df, 2279, 120)
library(dplyr)
test_clean <- clean_df(test_df, 2279, 120)
source('~/animaltracker/R/data_storage.R')
test_clean <- clean_df(test_df, 2279, 120)
#Get elevation
data_region <- sp::bbox(cbind(c(-117.2305, -117.101), c(43.2372, 43.3464))) # set a bounding box for retrieval of elev data
source('~/animaltracker/R/data_storage.R')
source('~/animaltracker/R/data_storage.R')
test_clean <- clean_df(test_df, 2279, 120)
source('~/animaltracker/R/data_storage.R')
test_clean <- clean_df(test_df, 2279, 120)
library(spatial)
library(elevatr)
test_clean <- clean_df(test_df, 2279, 120)
View(data_region)
?get_aws_terrain
?bbox
source('~/animaltracker/R/data_storage.R')
source('~/animaltracker/R/app.R')
source('~/animaltracker/R/app.R')
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
?showModal
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
install.packages(shinycssloaders)
install.packages("shinycssloaders")
library(shinycssloaders)
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
source('~/animaltracker/R/app.R')
run_shiny_animaltracker()
packageVersion("shinycssloaders")
setwd("animaltracker")
source("app.R")
source("R/app.R")
run_shiny_animaltracker()
View(clean_df)
View(clean_df)
View(test_df)
View(clean_df)
View(test_clean)
source("R/app.R")
run_shiny_animaltracker()
hist(test_df$Latitude)
library(ggplot2)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_bar()
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram()
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 1)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.25)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 100)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 40)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.0001)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.001)
ggplot(test_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.1)
ggplot(clean_df, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.1)
ggplot(test_clean, aes(x=test_df$Latitude)) + geom_histogram(binwidth = 0.1)
ggplot(test_clean, aes(x=test_clean$Latitude)) + geom_histogram(binwidth = 0.1)
ggplot(test_clean, aes(x=test_clean$Latitude)) + geom_histogram(binwidth = 0.01)
ggplot(test_clean, aes(x=test_clean$Latitude)) + geom_histogram(binwidth = 0.001)
ggplot(test_clean, aes(x=test_clean$Latitude)) + geom_histogram(binwidth = 0.0001)
source('~/animaltracker/R/data_storage.R')
View(test_clean)
clean_df(test_df, 2279, 120)
source('~/animaltracker/R/data_storage.R')
clean_df(test_df, 2279, 120)
test_clean <- clean_df(test_df, 2279, 120)
View(test_clean)
